#
# Auto-generated cmake build file for gu_util
#
cmake_minimum_required(VERSION 3.15.0)
project(gu_util CXX)
enable_testing()
include( GNUInstallDirs )
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED True)
add_compile_definitions()
include_directories($<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/./ $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gu_util> ../../Common /usr/local/include)
link_directories(/usr/local/lib)
add_library(libgu_util SHARED gu_util.cpp)
add_library(libgu_utilStatic STATIC gu_util.cpp)
set_target_properties(libgu_util PROPERTIES OUTPUT_NAME gu_util)
set_target_properties(libgu_utilStatic PROPERTIES OUTPUT_NAME gu_util)
set_property(TARGET libgu_util PROPERTY POSITION_INDEPENDENT_CODE 1)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}")
set(CMAKE_SKIP_BUILD_RPATH FALSE)
set(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)
set(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
set(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib;/usr/local/lib")
target_include_directories(libgu_util INTERFACE $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>/./ $<BUILD_INTERFACE:${CMAKE_SOURCE_DIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gu_util>)
target_include_directories(libgu_util PUBLIC $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}> $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/gu_util>)
target_link_libraries(libgu_util )
include(CMakePackageConfigHelpers)
configure_package_config_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.cmake.in "${CMAKE_CURRENT_BINARY_DIR}/gu_utilConfig.cmake" INSTALL_DESTINATION "lib/cmake/gu_util" NO_SET_AND_CHECK_MACRO NO_CHECK_REQUIRED_COMPONENTS_MACRO )
write_basic_package_version_file( "${CMAKE_CURRENT_BINARY_DIR}/gu_utilConfigVersion.cmake" VERSION "1.0" COMPATIBILITY AnyNewerVersion )
install(TARGETS libgu_util libgu_utilStatic DESTINATION lib EXPORT gu_util)
install(FILES gu_util.h DESTINATION include/gu_util)
install(EXPORT gu_util FILE gu_util.cmake DESTINATION lib/cmake/gu_util )
install(FILES ${CMAKE_CURRENT_BINARY_DIR}/gu_utilConfig.cmake ${CMAKE_CURRENT_BINARY_DIR}/gu_utilConfigVersion.cmake DESTINATION lib/cmake/gu_util )
export(EXPORT gu_util FILE "${CMAKE_CURRENT_BINARY_DIR}/gu_util.cmake" )
